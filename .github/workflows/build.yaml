name: builder

on:
  push:
    branches:
      - "main"
      - "release-*"
    tags:
      - "*"

  pull_request:
    branches:
      - "main"
      - "release-*"

env:
  CONTAINER_REGISTRY: ghcr.io
  TRIVY_IGNORE_UNFIXED: true
  TRIVY_VULN_TYPE: "os,library"
  TRIVY_SEVERITY: "CRITICAL,HIGH"

defaults:
  run:
    shell: bash

jobs:
  prepare_ci_run:
    name: Prepare CI Run
    # Prepare CI Run looks at what has been changed in this commit/PR/... and determines which artifacts should be
    # built afterwards (in other jobs that depend on this one).
    runs-on: ubuntu-20.04
    outputs: # declare what this job outputs (so it can be re-used for other jobs)
      # build config
      # metadata
      GIT_SHA: ${{ steps.extract_branch.outputs.GIT_SHA }}
      BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
      BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
      VERSION: ${{ steps.get_version.outputs.VERSION }}
      PUSH_IMAGE: ${{ steps.get_version.outputs.PUSH_IMAGE }}
      DATE: ${{ steps.get_datetime.outputs.DATE }}
      TIME: ${{ steps.get_datetime.outputs.TIME }}
      DATETIME: ${{ steps.get_datetime.outputs.DATETIME }}

    steps:
      - name: Check out code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # need to checkout "all commits" for certain features to work (e.g., get all changed files)

      - name: Extract branch name
        id: extract_branch
        # see https://github.com/keptn/gh-action-extract-branch-name for details
        uses: keptn/gh-action-extract-branch-name@main

      - name: "Get Previous tag"
        id: get_previous_tag
        uses: "WyriHaximus/github-action-get-previous-tag@v1.1"
        with:
          fallback: "0.0.1"

      - name: "Get next patch version"
        id: get_next_semver_tag
        uses: "WyriHaximus/github-action-next-semvers@v1.1"
        with:
          version: ${{ steps.get_previous_tag.outputs.tag }}
      - name: Get the version
        id: get_version
        env:
          BRANCH: ${{ steps.extract_branch.outputs.BRANCH }}
          BRANCH_SLUG: ${{ steps.extract_branch.outputs.BRANCH_SLUG }}
        shell: bash
        run: |
          # determine version
          GIT_LAST_TAG=${{ steps.get_previous_tag.outputs.tag }}
          GIT_NEXT_TAG=${{ steps.get_next_semver_tag.outputs.patch }}
          echo "GIT_LAST_TAG=${GIT_LAST_TAG}, GIT_NEXT_TAG=${GIT_NEXT_TAG}"
          if [[ "$BRANCH" == "release-"* ]]; then
            # Release Branch: extract version from branch name
            VERSION=${BRANCH#"release-"}
            else
            if [[ "$BRANCH" == "master" ]]; then
              # master branch = latest-dev
              VERSION="${GIT_NEXT_TAG}-dev"
            else
              # Feature/Development Branch - use last tag with branch slug
              VERSION="${GIT_NEXT_TAG}-dev-${BRANCH_SLUG}"
            fi
          fi
          echo "VERSION=${VERSION}"
          echo "##[set-output name=VERSION;]$(echo ${VERSION})"
      - name: Get current date and time
        id: get_datetime
        run: |
          echo "::set-output name=DATE::$(date +'%Y%m%d')"
          echo "::set-output name=TIME::$(date +'%H%M')"
          echo "::set-output name=DATETIME::$(date +'%Y%m%d')$(date +'%H%M')"
  ############################################################################
  # Build Container Images                                                   #
  ############################################################################
  container_build:
    needs: [prepare_ci_run]
    runs-on: ubuntu-20.04
    env:
      BRANCH: ${{ needs.prepare_ci_run.outputs.BRANCH }}
      VERSION: ${{ needs.prepare_ci_run.outputs.VERSION }}
      DATETIME: ${{ needs.prepare_ci_run.outputs.DATE }}${{ needs.prepare_ci_run.outputs.TIME }}
      GIT_SHA: ${{ needs.prepare_ci_run.outputs.GIT_SHA }}
    steps:
      - name: Checkout Code
        uses: actions/checkout@v2

      - uses: sigstore/cosign-installer@main
        with:
          cosign-release: "v1.0.0"

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v1

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v1
        with:
          install: true
          version: latest

      - name: Login to GitHub Container Registry
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Lint
        uses: golangci/golangci-lint-action@v2
        with:
          version: v1.29

      - name: Build
        id: docker_build
        uses: docker/build-push-action@v2
        with:
          build-args: |
            VERSION=v0.0.1
          push: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/release-*' }}
          file: Dockerfile
          platforms: linux/amd64,linux/arm/v7,linux/arm64
          tags: |
            ${{ env.CONTAINER_REGISTRY }}/tekenstam/hello-server:latest-dev
            ${{ env.CONTAINER_REGISTRY }}/tekenstam/hello-server:${{ env.VERSION }}

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ env.CONTAINER_REGISTRY }}/tekenstam/hello-server:${{ env.VERSION }}"
          format: "table"
          exit-code: "1"
          ignore-unfixed: "${{ env.TRIVY_IGNORE_UNFIXED }}"
          vuln-type: "${{ env.TRIVY_VULN_TYPE }}"
          severity: "${{ env.TRIVY_SEVERITY }}"
